// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                    Int          @id @default(autoincrement())
  name                  String
  password              String
  email                 String       @unique
  organizationDomain    String
  role                  Role         @relation(fields: [roleId], references: [id])
  roleId                Int
  designation           Designation   @relation(fields: [designationId], references: [id])
  designationId         Int
  department            Department    @relation(fields: [departmentId], references: [id])
  departmentId          Int
  joiningDate           DateTime     @default(now())
  enrollments           Enrollment[]
  performanceMetrics    PerformanceMetric[]
  feedbacks             Feedback[]
  courseRequests        CourseRequest[]
}

// Role Model
model Role {
  id                    Int          @id @default(autoincrement())
  name                  String       @unique
  users                 User[]
}

// Designation Model
model Designation {
  id                    Int          @id @default(autoincrement())
  title                 String       @unique // e.g., "Software Developer", "Senior Software Developer"
  users                 User[]
}

// Department Model
model Department {
  id                    Int          @id @default(autoincrement())
  name                  String       @unique // Unique name for the department
  users                 User[]       // Relation back to the User model
}

// Course Model
model Course {
  id                    Int          @id @default(autoincrement())
  title                 String
  duration              Int          // Duration in hours
  difficultyLevel       String
  description           String
  enrollments           Enrollment[]
  performanceMetrics    PerformanceMetric[]
  feedbacks             Feedback[]
  learningPathCourses   LearningPathCourse[]
  courseRequests        CourseRequest[]
}

// Enrollment Model
model Enrollment {
  id                    Int          @id @default(autoincrement())
  user                  User         @relation(fields: [userId], references: [id])
  userId                Int
  course                Course       @relation(fields: [courseId], references: [id])
  courseId              Int
  enrollmentDate        DateTime     @default(now())
  completionStatus      String       // e.g., In Progress, Completed
  completionDate        DateTime?
  percentage            Int 
  lastUpdated           DateTime     @updatedAt // Automatically updated timestamp
  courseCompletion      CourseCompletion[]
}

// CourseCompletion Model
model CourseCompletion {
  id                    Int          @id @default(autoincrement())
  enrollment            Enrollment    @relation(fields: [enrollmentId], references: [id])
  enrollmentId          Int
  score                 Float
  certificateLink       String?
}

// LearningPath Model
model LearningPath {
  id                    Int          @id @default(autoincrement())
  title                 String
  description           String
  learningPathCourses   LearningPathCourse[]
}

// LearningPathCourse Model
model LearningPathCourse {
  id                    Int          @id @default(autoincrement())
  learningPath         LearningPath  @relation(fields: [learningPathId], references: [id])
  learningPathId       Int
  course               Course        @relation(fields: [courseId], references: [id])
  courseId            Int
  sequence             Int
}

// PerformanceMetric Model
model PerformanceMetric {
  id                    Int          @id @default(autoincrement())
  user                  User         @relation(fields: [userId], references: [id])
  userId                Int
  course                Course       @relation(fields: [courseId], references: [id])
  courseId              Int
  completionTime        String       // e.g., "5 hours"
  performanceScore      Float
}

// Feedback Model
model Feedback {
  id                    Int          @id @default(autoincrement())
  user                  User         @relation(fields: [userId], references: [id])
  userId                Int
  course                Course       @relation(fields: [courseId], references: [id])
  courseId              Int
  rating                Int          // Scale of 1 to 5
  comments              String?
}

// CourseRequest Model
model CourseRequest {
  id                    Int          @id @default(autoincrement())
  user                  User         @relation(fields: [userId], references: [id])
  userId                Int
  course                Course       @relation(fields: [courseId], references: [id])
  courseId              Int
  requestDate           DateTime     @default(now())
  status                String       // e.g., Pending, Approved, Rejected
}
